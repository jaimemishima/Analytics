print("i:")
print(i)
if(str_count(df[[i,1]], ">")>(n_gram-1)){
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=n_gram)[[1]]))
print("A: ")
print(caminhos)
t = length(caminhos) - t0
}
else{
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, df[[i,1]])
t = length(caminhos) - t0
print("B: ")
print(caminhos)
}
q = rep(df[[i,2]],t)
quantidade = append(quantidade, q)
print("Q:")
print(quantidade)
#c=rep(df[[i,3]],t)
#conversao = append(conversao, c)
#print("C:")
#print(conversao)
}
output=data.frame(caminhos, quantidade)#, conversao)
output
}
pathConversion(input,2)
pathConversion = function(input, n_gram){
df=input
library(stringr)
library(tokenizers)
caminhos=c(0,0)
quantidade=c(0,0)
#conversao=c(0,0)
for (i in 1:nrow(df)){
print("i:")
print(i)
if(str_count(df[[i,1]], ">")>(n_gram-1)){
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=n_gram)[[1]]))
print("A: ")
print(caminhos)
t = length(caminhos) - t0
}
else{
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(df[[i,1]]))
t = length(caminhos) - t0
print("B: ")
print(caminhos)
}
q = rep(df[[i,2]],t)
quantidade = append(quantidade, q)
print("Q:")
print(quantidade)
#c=rep(df[[i,3]],t)
#conversao = append(conversao, c)
#print("C:")
#print(conversao)
}
output=data.frame(caminhos, quantidade)#, conversao)
output
}
pathConversion(input,2)
pathConversion = function(input, n_gram){
df=input
library(stringr)
library(tokenizers)
caminhos=c(0,0)
quantidade=c(0,0)
#conversao=c(0,0)
for (i in 1:nrow(df)){
print("i:")
print(i)
if(str_count(df[[i,1]], ">")>(n_gram-1)){
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=n_gram)[[1]]))
print("A: ")
print(caminhos)
t = length(caminhos) - t0
}
else{
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=str_count(df[[i,1]], ">"))[[1]]))
t = length(caminhos) - t0
print("B: ")
print(caminhos)
}
q = rep(df[[i,2]],t)
quantidade = append(quantidade, q)
print("Q:")
print(quantidade)
#c=rep(df[[i,3]],t)
#conversao = append(conversao, c)
#print("C:")
#print(conversao)
}
output=data.frame(caminhos, quantidade)#, conversao)
output
}
pathConversion(input,2)
pathConversion = function(input, n_gram){
df=input
library(stringr)
library(tokenizers)
caminhos=c(0,0)
quantidade=c(0,0)
#conversao=c(0,0)
for (i in 1:nrow(df)){
print("i:")
print(i)
if(str_count(df[[i,1]], ">")>(n_gram-1)){
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=n_gram)[[1]]))
print("A: ")
print(caminhos)
t = length(caminhos) - t0
}
else{
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=str_count(df[[i,1]], ">")+1)[[1]]))
t = length(caminhos) - t0
print("B: ")
print(caminhos)
}
q = rep(df[[i,2]],t)
quantidade = append(quantidade, q)
print("Q:")
print(quantidade)
#c=rep(df[[i,3]],t)
#conversao = append(conversao, c)
#print("C:")
#print(conversao)
}
output=data.frame(caminhos, quantidade)#, conversao)
output
}
pathConversion(input,2)
pathConversion = function(input, n_gram){
df=input
library(stringr)
library(tokenizers)
caminhos=c(0,0)
quantidade=c(0,0)
conversao=c(0,0)
for (i in 1:nrow(df)){
print("i:")
print(i)
if(str_count(df[[i,1]], ">")>(n_gram-1)){
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=n_gram)[[1]]))
print("A: ")
print(caminhos)
t = length(caminhos) - t0
}
else{
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=str_count(df[[i,1]], ">")+1)[[1]]))
t = length(caminhos) - t0
print("B: ")
print(caminhos)
}
q = rep(df[[i,2]],t)
quantidade = append(quantidade, q)
print("Q:")
print(quantidade)
c=rep(df[[i,3]],t)
conversao = append(conversao, c)
print("C:")
print(conversao)
}
output=data.frame(caminhos, quantidade)#, conversao)
output
}
pathConversion(input,2)
pathConversion = function(input, n_gram){
df=input
library(stringr)
library(tokenizers)
caminhos=c(0,0)
quantidade=c(0,0)
conversao=c(0,0)
for (i in 1:nrow(df)){
print("i:")
print(i)
if(str_count(df[[i,1]], ">")>(n_gram-1)){
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=n_gram)[[1]]))
print("A: ")
print(caminhos)
t = length(caminhos) - t0
}
else{
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=str_count(df[[i,1]], ">")+1)[[1]]))
t = length(caminhos) - t0
print("B: ")
print(caminhos)
}
q = rep(df[[i,2]],t)
quantidade = append(quantidade, q)
print("Q:")
print(quantidade)
c=rep(df[[i,3]],t)
conversao = append(conversao, c)
print("C:")
print(conversao)
}
output=data.frame(caminhos, quantidade, conversao)
output
}
pathConversion(input,2)
paths <- c('a > b > c','d > e > f > t','g > h')
quantidade <- c(10, 3, 2)
conversao <- c(3, 2, 1)
input <- data.frame(paths, quantidade, conversao)
pathConversion = function(input, n_gram){
df=input
library(stringr)
library(tokenizers)
caminhos=c(0,0)
quantidade=c(0,0)
conversao=c(0,0)
for (i in 1:nrow(df)){
print("i:")
print(i)
if(str_count(df[[i,1]], ">")>(n_gram-1)){
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=n_gram)[[1]]))
print("A: ")
print(caminhos)
t = length(caminhos) - t0
}
else{
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=str_count(df[[i,1]], ">")+1)[[1]]))
t = length(caminhos) - t0
print("B: ")
print(caminhos)
}
q = rep(df[[i,2]],t)
quantidade = append(quantidade, q)
print("Q:")
print(quantidade)
c=rep(df[[i,3]],t)
conversao = append(conversao, c)
print("C:")
print(conversao)
}
output=data.frame(caminhos, quantidade, conversao)
output
}
input <- data.frame(paths, quantidade, conversao)
pathConversion(input,2)
pathConversion = function(input, n_gram){
df=input
library(stringr)
library(tokenizers)
caminhos=c(0,0)
quantidade=c(0,0)
conversao=c(0,0)
for (i in 1:nrow(df)){
print("i:")
print(i)
if(str_count(df[[i,1]], ">")>(n_gram-1)){
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=n_gram)[[1]]))
print("A: ")
print(caminhos)
t = length(caminhos) - t0
}
else{
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=str_count(df[[i,1]], ">")+1)[[1]]))
t = length(caminhos) - t0
print("B: ")
print(caminhos)
}
q = rep(df[[i,2]],t)
quantidade = append(quantidade, q)
print("Q:")
print(quantidade)
c=rep(df[[i,3]],t)
conversao = append(conversao, c)
print("C:")
print(conversao)
}
output=data.frame(caminhos, quantidade, conversao)
return output
}
pathConversion = function(input, n_gram){
df=input
library(stringr)
library(tokenizers)
caminhos=c(0,0)
quantidade=c(0,0)
conversao=c(0,0)
for (i in 1:nrow(df)){
print("i:")
print(i)
if(str_count(df[[i,1]], ">")>(n_gram-1)){
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=n_gram)[[1]]))
print("A: ")
print(caminhos)
t = length(caminhos) - t0
}
else{
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=str_count(df[[i,1]], ">")+1)[[1]]))
t = length(caminhos) - t0
print("B: ")
print(caminhos)
}
q = rep(df[[i,2]],t)
quantidade = append(quantidade, q)
print("Q:")
print(quantidade)
c=rep(df[[i,3]],t)
conversao = append(conversao, c)
print("C:")
print(conversao)
}
output=data.frame(caminhos, quantidade, conversao)
return(output)
}
output = pathConversion(input,2)
View(output)
View(output)
library(plyr)
install.packages("plyr")
library(plyr)
groupColumns = c("caminhos")
dataColumns = c("quantidade", "conversao")
res = ddply(output, groupColumns, function(x) colSums(x[dataColumns]))
head(res)
paths <- c('a > b > c','a > b > f > t','g > h')
quantidade <- c(10, 3, 2)
conversao <- c(3, 2, 1)
input <- data.frame(paths, quantidade, conversao)
pathConversion = function(input, n_gram){
df=input
library(stringr)
library(tokenizers)
caminhos=c(0,0)
quantidade=c(0,0)
conversao=c(0,0)
for (i in 1:nrow(df)){
print("i:")
print(i)
if(str_count(df[[i,1]], ">")>(n_gram-1)){
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=n_gram)[[1]]))
print("A: ")
print(caminhos)
t = length(caminhos) - t0
}
else{
print(df[[i,1]])
t0 = length(caminhos)
caminhos=append(caminhos, as.array(tokenize_ngrams(as.character(df[[i,1]]), n=str_count(df[[i,1]], ">")+1)[[1]]))
t = length(caminhos) - t0
print("B: ")
print(caminhos)
}
q = rep(df[[i,2]],t)
quantidade = append(quantidade, q)
print("Q:")
print(quantidade)
c=rep(df[[i,3]],t)
conversao = append(conversao, c)
print("C:")
print(conversao)
}
output=data.frame(caminhos, quantidade, conversao)
return(output)
}
output = pathConversion(input,2)
groupColumns = c("caminhos")
dataColumns = c("quantidade", "conversao")
res = ddply(output, groupColumns, function(x) colSums(x[dataColumns]))
head(res)
View(res)
View(res)
setwd("~/Desktop/Jaime/MBA/R Codes")
setwd("~/Desktop/Jaime/MBA/R Codes")
# Define Working directory
setwd("~/Desktop/Jaime/MBA/R Codes")
getwd()
#
example(getwd)
# Vector in R
vector_name <- c(1, "string")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
```{r cars}
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
# Set Working directory
setwd("~/Desktop/Jaime/MBA/R Codes")
# Show working directory
getwd()
setwd("~/Desktop/Jaime/MBA/R Codes")
getwd()
# Example shows templates to understand a R function
example(getwd)
setwd("~/Desktop/Jaime/MBA/R Codes")
getwd()
# Example shows templates to understand a R function
example(getwd)
# Vector in R
vector_name <- c(1, "string")
vector_name
# Create a 3x2 matrix
matrix_name <- matrix(1:6, nrow = 3, ncol = 2)
matrix_name
columns <- c("col_name_1", "col_name_1")
row <- c(10,20)
# Create a dataframe joining both vectors
df <- data.frame(columns, row)
df
class(df)
# Create a vector com 4 Brazilian States
estado <- c("SP", "RJ", "RS", "PR")
# Create a vector with the population of those states
populacao <- c(45094866, 16718956, 11322895, 11320892)
# Create a dataframe joining both vectors
pop_estados <- data.frame(estado, populacao)
pop_estados
column1 <- c("col1_1", "col1_2")
column2 <- c(10,20)
# Create a dataframe joining both vectors
df <- data.frame(columns, row)
df
class(df)
column1 <- c("col1_1", "col1_2")
column2 <- c(10,20)
# Create a dataframe joining both vectors
df <- data.frame(column1, column2)
df
class(df)
column1 <- c("col1_1", "col1_2")
column2 <- c(10,20)
# Create a dataframe joining both vectors
df <- data.frame(column1, column2)
df
class(df)
class(df)
# Create a function to print squares of numbers in sequence.
new.function <- function(a) {
for(i in 1:a) {
b <- i^2
print(b)
}
}
new.function(4)
# Create a vector with package names
package_vector <- c("dplyr", "tidyverse", "magrittr", "gbm", "RWeka", "tidyr", "ggplot2", "plotly", "RSQLite", "SnowballC", "Wordcloud")
install.packages(package_vector)
install.packages(package_vector)
knitr::opts_chunk$set(echo = TRUE)
# Load all packages in a row
lapply(R_packages, library, character.only = TRUE)
# Load all packages in a row
lapply(package_vector, library, character.only = TRUE)
# Create a vector with package names
package_vector <- c("dplyr", "tidyverse", "magrittr", "gbm", "tidyr", "ggplot2", "plotly", "RSQLite", "SnowballC", "Wordcloud")
install.packages(package_vector)
install.packages(package_vector)
# Load all packages in a row
lapply(package_vector, library, character.only = TRUE)
# Create a vector with package names
package_vector <- c("dplyr", "tidyverse", "magrittr", "gbm", "tidyr", "ggplot2", "plotly", "RSQLite", "SnowballC")
# Load all packages in a row
lapply(package_vector, library, character.only = TRUE)
# Load all packages in a row
lapply(package_vector, library, character.only = TRUE)
points <- read.csv("points.csv", sep=",")
View(points) # View is with a capital letter
points <- read.csv("points.csv", sep=",")
View(points) # View is with a capital letter
points <- read.csv("points.csv", sep=",")
head(points, 5)
View(points) # View is with a capital letter
options(repos=structure(c(CRAN="http://cran.r-project.org")))
options(repos="https://cran.rstudio.com" )
install.packages("pscl", repos = "https://cran.rstudio.com")
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
chooseCRANmirror(graphics=FALSE, ind=1)
